package xingpong;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionListener; 
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.Timer;
import javax.swing.JFrame; 
import java.awt.event.ActionEvent; 


public class Xing implements ActionListener, KeyListener{
	
	public static Xing xing;
	public int largura = 700, altura = 700;  
	public Renderizador renderizador;
	public Barra jogador1;
	public Barra jogador2;
	public boolean bot = false;
	public boolean w, s, up, down;
	public Bola bola;
	public int status = 0, vencedor;   //page inicial = 0, 1 = jogo pausado, 2 = jogando, 3 = finalizado
	public int limitedepontos = 5;
	
	public Xing() {
		Timer timer = new Timer(20, this);   // é o que mantém a tela
		JFrame jframe = new JFrame("Xing");  
		
		renderizador = new Renderizador();
		
		jframe.setSize(largura +15, altura + 35);  //tamanho das barras
		jframe.setVisible(true);  //faz a tela aparecer para o user
		jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		jframe.add(renderizador);
		jframe.addKeyListener(this);
		
		timer.start();
	
	}
	
	public void start() {
	    status = 2; 
		jogador1 = new Barra(this, 1);
		jogador2 = new Barra(this, 2);
		bola = new Bola(this);
	}
	
	public void update() {
		
		if (jogador1.pontos >= limitedepontos) {
			status = 3;
			this.vencedor = 1;
		}
		
		if (jogador2.pontos >= limitedepontos) {
			status = 3;
			this.vencedor = 2;
		}
		
		if (w) {
			jogador1.mover(true);
		}
		else if (s) {
			jogador1.mover(false);
		}
		
		else if (!bot) {
		if (up) {
			jogador2.mover(true);
		}
		else if (down) {
			jogador2.mover(false);
		}
		}
		
		else {
			if (jogador2.y + jogador2.altura/2 < bola.y) {
				jogador2.mover(false);
			}
			if (jogador2.y + jogador2.altura/2 > bola.y) {
				jogador2.mover(true);
		}
		
		}
		bola.update(jogador1, jogador2);
	}
	

	public void renderizador(Graphics2D g) {
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, largura, altura);
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		if (status == 0) {
			g.setColor(Color.RED);
			g.setFont(new Font("Arial", 1, 50));
			g.drawString("#RED PONG", largura/2 - 140, 50);
			
			g.setFont(new Font("Arial", 1, 20));
			g.drawString("#Pressione barra para jogar contra um amigo", largura/2 - 210, altura/2 - 50);
			g.drawString("#Pressione shift para jogar contra o PC", largura/2 - 180, altura/2 + 50);
		}
		
		
		if(status == 2 || status == 1) {
		g.setColor(Color.RED);
		g.drawLine(largura/2, 0, largura/2, altura);
		
		
		g.setFont(new Font("Arial", 1, 30));
		g.drawString(String.valueOf(jogador1.pontos), largura/2 - 110, altura/2 - 280);
		g.drawString(String.valueOf(jogador2.pontos), largura/2 + 110, altura/2 - 280);
		
		jogador1.render(g);
		jogador2.render(g);
		bola.render(g);
		}
		
        if (status == 1) {
        	g.setColor(Color.RED);
			g.setFont(new Font("Arial", 1, 30));
			g.drawString("#JOGO PAUSADO", largura/2 - 110, altura/2 - 25);
		}
        
        if (status == 3) {
        	g.setColor(Color.RED);
        	g.setFont(new Font("Arial", 1, 50));
        	
        	g.drawString("#RED PONG", largura/2 - 155, 50);
        	
        	if (bot && vencedor == 2)
			{
				g.drawString("#O Bot Venceu!", largura / 2 - 170, 200);
				
			}
			else
			{
				g.drawString("#Jogador " + vencedor + " venceu!", largura / 2 - 250, 200);
}
        	
        	g.setFont(new Font("Arial", 1, 20));
			g.drawString("#Pressione barra para jogar contra o amigo", largura/2 - 220, altura/2 - 50);
			g.drawString("#Pressione shift para jogar contra o PC", largura/2 - 210, altura/2 + 50);
        	
        }
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (status == 2) {
		update();
		}
		renderizador.repaint();
	}
	
	public static void main (String [] args) {
		xing = new Xing();
	}

	@Override
	public void keyPressed(KeyEvent e) {
		
		int id = e.getKeyCode();
		
		if (id == KeyEvent.VK_W) {
			w = true;
		}
		
		else if (id == KeyEvent.VK_S) {
			s = true;
		}
		
		else if (id == KeyEvent.VK_UP) {
			up = true;
		}
		
		else if (id == KeyEvent.VK_DOWN) {
			down = true;
		}
		
		else if (id == KeyEvent.VK_ESCAPE && (status == 2 || status == 3)) {
			status = 0;
			start();
		}
		
		else if (id == KeyEvent.VK_ESCAPE && status == 1) {
			status = 0;
		}
		
		else if(id == KeyEvent.VK_SHIFT && (status == 0 || status == 3)) {
			bot = true;
			start();
		}
		
		if(id == KeyEvent.VK_SPACE) {
			if (status == 0 || status == 3) {
				start();
				bot = false;
			}
			else if (status == 1) {
				status = 2;
			}
			else if (status == 2) {
				status = 1;
			}
			
		}
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		
        int id = e.getKeyCode();
		
		if (id == KeyEvent.VK_W) {
			w = false;
		}
		
		if (id == KeyEvent.VK_S) {
			s = false;
		}
		
		if (id == KeyEvent.VK_UP) {
			up = false;
		}
		
		if (id == KeyEvent.VK_DOWN) {
			down = false;
		}
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		
		
	}

}
